package models

type Qiita struct {
	ID          int    `json:"id"`
}


type QittaList struct {
	Id          string   `json:"id"`
	Title       string   `json:"title"`
	Body        string   `json:"body"`
	CreatedAt   string   `json:"created_at"`
	UpdatedAt   string   `json:"updated_at"`
	Url         string   `json:"url"`
	Tags        []string `json:"tags"`
	Private     bool     `json:"private"`
	LikesCount  int      `json:"likes_count"`
}

// [
//     {
//         "rendered_body": "<h2 data-sourcepos=\"1:1-1:9\">\n<span id=\"前置\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E7%BD%AE\"><i class=\"fa fa-link\"></i></a>前置</h2>\n<p data-sourcepos=\"3:1-5:84\">私はプログラミングを始めて半年の初心者である。名前はまだない<br>\nモバイルアプリの勉強をずっとしてきたが、ハッカソンでwebAPIを作ることに<br>\nなったので作ってみた。多分間違っている部分があると思う。</p>\n<p data-sourcepos=\"7:1-8:87\">※これは時間がない人向けに簡単にまとめたものです。<br>\n詳しく書いた物も随時投稿していきますので、お待ちください。</p>\n<h2 data-sourcepos=\"10:1-10:12\">\n<span id=\"apiとは\" class=\"fragment\"></span><a href=\"#api%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>APIとは</h2>\n<p data-sourcepos=\"12:1-13:252\">そもそもAPIとはなんでしょうか？<br>\nAPI（Application Programming Interface）とは、プログラムの機能の一部を別のプログラム上で利用できるように共有する仕組み。簡単に言うとweb上で動かすプログラム関数みたいなことだと思う。</p>\n<h4 data-sourcepos=\"15:1-15:11\">\n<span id=\"webapi\" class=\"fragment\"></span><a href=\"#webapi\"><i class=\"fa fa-link\"></i></a>webAPI</h4>\n<p data-sourcepos=\"17:1-20:130\">その中でもhttpやhttpsなどWeb技術を用いて実現されるAPIの一種。<br>\n今回はこれを実装していく。<br>\nイメージしにくいので画像を置いておく。画像のようにサーバーとwebブラウザで通信を行い、画面の切り替えをしたり、データを保存,呼び出しをしたりする。<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3476081%2F78cd8cf9-66c7-3d28-770a-8d5bc4d982d2.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=70aa089208f236e906f0bc63cc8b92b2\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3476081%2F78cd8cf9-66c7-3d28-770a-8d5bc4d982d2.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=70aa089208f236e906f0bc63cc8b92b2\" alt=\"webAPI画像.jpg\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3476081%2F78cd8cf9-66c7-3d28-770a-8d5bc4d982d2.jpeg?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=db87a368305e45635d5c7450072a06ee 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3476081/78cd8cf9-66c7-3d28-770a-8d5bc4d982d2.jpeg\" loading=\"lazy\"></a></p>\n<h2 data-sourcepos=\"22:1-22:16\">\n<span id=\"nodejsとは\" class=\"fragment\"></span><a href=\"#nodejs%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Node.jsとは</h2>\n<p data-sourcepos=\"23:1-24:192\">JavaScriptを用いてサーバーサイドで動作するアプリケーションを開発するための実行環境です。<br>\n※cjsやejsなど書き方の違いでモジュールの選択が変わって来る部分もありますが、そこに関しては今後詳しくまとめた物を投稿していきます。</p>\n<h2 data-sourcepos=\"26:1-26:19\">\n<span id=\"expressjsとは\" class=\"fragment\"></span><a href=\"#expressjs%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>Express.jsとは</h2>\n<p data-sourcepos=\"27:1-28:68\">Express.jsとはnode.jsのためのフレームワークです。<br>\njsでwebAPIを実装する一番ポピュラーなやつらしい。</p>\n<h2 data-sourcepos=\"30:1-30:15\">\n<span id=\"事前準備\" class=\"fragment\"></span><a href=\"#%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>事前準備</h2>\n<p data-sourcepos=\"32:1-33:71\">はじめにnode.jsをインストールしてnpmを使用できるようにしておく。<br>\n下のようにバージョンバージョンが帰ってこればOK！</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"35:1-38:3\"><div class=\"highlight\"><pre><code>$ node -v\nv21.1.0\n</code></pre></div></div>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"39:1-42:3\"><div class=\"highlight\"><pre><code>$ npm -v\n10.2.0\n</code></pre></div></div>\n<p data-sourcepos=\"43:1-43:93\">※インストール方法は今回は省くため参考サイトを貼っておきます。</p>\n<ul data-sourcepos=\"44:1-45:0\">\n<li data-sourcepos=\"44:1-45:0\"><a href=\"https://qiita.com/ryome/items/eec08b28aff294e8c3d6\" class=\"autolink\" id=\"reference-cef2313bb18941dd83e1\">https://qiita.com/ryome/items/eec08b28aff294e8c3d6</a></li>\n</ul>\n<h2 data-sourcepos=\"46:1-46:15\">\n<span id=\"環境構築\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89\"><i class=\"fa fa-link\"></i></a>環境構築</h2>\n<h4 data-sourcepos=\"48:1-48:34\">\n<span id=\"1プロジェクトの作成\" class=\"fragment\"></span><a href=\"#1%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>1.プロジェクトの作成</h4>\n<p data-sourcepos=\"50:1-50:90\">まず作業ディレクトリを作成し、そのディレクトリに移動します。</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"51:1-55:3\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code>$ mkdire express-web-api\n\n$ cd express-web-api\n</code></pre></div>\n</div>\n<p data-sourcepos=\"57:1-59:87\">そのディレクトリでnpmを初期化します。<br>\n初期化と言っているが、package.jsonというプロジェクトの管理ファイルをディレクトリ下に作成することです。<br>\nちなみに何か問題が起こった時にも初期化としても使用できる。</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"60:1-75:3\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code>$ npm init --yes\n\n{\n  \"name\": \"express-web-api\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" &amp;&amp; exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n</code></pre></div>\n</div>\n<p data-sourcepos=\"76:1-76:52\">これでnode.jsのプロジェクトが作れた。</p>\n<h4 data-sourcepos=\"78:1-78:35\">\n<span id=\"2expressのインストール\" class=\"fragment\"></span><a href=\"#2express%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>2.Expressのインストール</h4>\n<p data-sourcepos=\"80:1-80:37\">express.jsをインストールする</p>\n<div class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"81:1-90:3\"><div class=\"highlight\"><pre><code>$ npm install express\n\ndded 62 packages, and audited 63 packages in 4s\n\n11 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\n</code></pre></div></div>\n<h4 data-sourcepos=\"91:1-91:22\">\n<span id=\"3ファイルの\" class=\"fragment\"></span><a href=\"#3%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE\"><i class=\"fa fa-link\"></i></a>3.ファイルの</h4>\n<p data-sourcepos=\"93:1-95:54\">コードをメインで書いていく<code>index.js</code>ファイルを作成する<br>\n<a href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3476081%2F1bbd94f1-a1b5-eb58-c5b3-5cff7c2ad18a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5f9c40d2d4d2ef504f346be00bafff10\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3476081%2F1bbd94f1-a1b5-eb58-c5b3-5cff7c2ad18a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5f9c40d2d4d2ef504f346be00bafff10\" alt=\"スクリーンショット 2023-12-21 20.45.32.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F3476081%2F1bbd94f1-a1b5-eb58-c5b3-5cff7c2ad18a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9631c5265e0db8eeebf5ca93a97c21c2 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3476081/1bbd94f1-a1b5-eb58-c5b3-5cff7c2ad18a.png\" loading=\"lazy\"></a><br>\nこのファイルがメインファイルになる。</p>\n<h4 data-sourcepos=\"97:1-97:37\">\n<span id=\"4サーバーを建てよう\" class=\"fragment\"></span><a href=\"#4%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E5%BB%BA%E3%81%A6%E3%82%88%E3%81%86\"><i class=\"fa fa-link\"></i></a>4.サーバーを建てよう！</h4>\n<h5 data-sourcepos=\"99:1-99:22\">\n<span id=\"41-apiを作成\" class=\"fragment\"></span><a href=\"#41-api%E3%82%92%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>4.1 APIを作成</h5>\n<p data-sourcepos=\"100:1-101:78\">もちろん<code>index.js</code>に記入していくー<br>\n説明は後でするので、とりあえず下のコードを作成する。</p>\n<div class=\"code-frame\" data-lang=\"Javascript\" data-sourcepos=\"102:1-114:3\">\n<div class=\"code-lang\"><span class=\"bold\">index.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">express</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nf\">express</span><span class=\"p\">();</span>\n<span class=\"kd\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span><span class=\"p\">;</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Hello World!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s2\">`繋がったよ:http://localhost:</span><span class=\"p\">${</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">)</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n</div>\n<h5 data-sourcepos=\"115:1-115:30\">\n<span id=\"42サーバーを起動\" class=\"fragment\"></span><a href=\"#42%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E8%B5%B7%E5%8B%95\"><i class=\"fa fa-link\"></i></a>4.2サーバーを起動</h5>\n<p data-sourcepos=\"116:1-116:146\">ターミナルで<code>node index.js</code>とコマンドを打てば、ローカルサーバー(パソコン内のみのサーバー)が起動できる。</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"117:1-120:3\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code>$ node index.js\n繋がったよhttp://localhost:3000\n</code></pre></div>\n</div>\n<p data-sourcepos=\"121:1-122:113\">この<code>http://localhost:3000</code>をブラウザでひらけば<code>Hello World!</code>が出力される。<br>\n※ <code>package.json</code>にstartコマンドを追加して起動コマンドを変更するのが一般的らしい。</p>\n<div class=\"code-frame\" data-lang=\"Javascript\" data-sourcepos=\"123:1-140:3\">\n<div class=\"code-lang\"><span class=\"bold\">package.json</span></div>\n<div class=\"highlight\"><pre><code><span class=\"p\">{</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">name</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">express-web-api</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">version</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">1.0.0</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">description</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">main</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">index.js</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">scripts</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">start</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">node index.js</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">test</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">echo </span><span class=\"se\">\\\"</span><span class=\"s2\">Error: no test specified</span><span class=\"se\">\\\"</span><span class=\"s2\"> &amp;&amp; exit 1</span><span class=\"dl\">\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">keywords</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">author</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">license</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">ISC</span><span class=\"dl\">\"</span><span class=\"p\">,</span>\n  <span class=\"dl\">\"</span><span class=\"s2\">dependencies</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"dl\">\"</span><span class=\"s2\">express</span><span class=\"dl\">\"</span><span class=\"p\">:</span> <span class=\"dl\">\"</span><span class=\"s2\">^4.18.2</span><span class=\"dl\">\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"141:1-141:84\">上の様に書き換えれば、<code>node index.js</code>でサーバーが起動できる。</p>\n<div class=\"code-frame\" data-lang=\"\" data-sourcepos=\"142:1-145:3\">\n<div class=\"code-lang\"><span class=\"bold\">ターミナル</span></div>\n<div class=\"highlight\"><pre><code>$ node index.js\n繋がったよhttp://localhost:3000\n</code></pre></div>\n</div>\n<h5 data-sourcepos=\"146:1-146:30\">\n<span id=\"43サーバーを停止\" class=\"fragment\"></span><a href=\"#43%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC%E3%82%92%E5%81%9C%E6%AD%A2\"><i class=\"fa fa-link\"></i></a>4.3サーバーを停止</h5>\n<p data-sourcepos=\"148:1-149:20\"><code>control + c</code>で停止できる<br>\n(windows:<code>ctrl + c</code>)</p>\n<p data-sourcepos=\"151:1-151:110\">これでAPIサーバーをローカールで起動,アクセス,停止までをできるようになった。</p>\n<h2 data-sourcepos=\"153:1-153:24\">\n<span id=\"apiの作成の仕方\" class=\"fragment\"></span><a href=\"#api%E3%81%AE%E4%BD%9C%E6%88%90%E3%81%AE%E4%BB%95%E6%96%B9\"><i class=\"fa fa-link\"></i></a>APIの作成の仕方</h2>\n<p data-sourcepos=\"154:1-154:55\">先ほどの<code>index.js</code>の中身で説明していく。</p>\n<h3 data-sourcepos=\"156:1-156:22\">\n<span id=\"1expressの基本\" class=\"fragment\"></span><a href=\"#1express%E3%81%AE%E5%9F%BA%E6%9C%AC\"><i class=\"fa fa-link\"></i></a>1.Expressの基本</h3>\n<h4 data-sourcepos=\"158:1-158:35\">\n<span id=\"11モジュールのロード\" class=\"fragment\"></span><a href=\"#11%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB%E3%81%AE%E3%83%AD%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>1.1モジュールのロード</h4>\n<p data-sourcepos=\"159:1-159:61\">expressモジュールを読み込み、appに代入する。</p>\n<div class=\"code-frame\" data-lang=\"Javascript\" data-sourcepos=\"160:1-164:3\">\n<div class=\"code-lang\"><span class=\"bold\">index.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">//1.1</span>\n<span class=\"kd\">const</span> <span class=\"nx\">express</span> <span class=\"o\">=</span> <span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">express</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"kd\">const</span> <span class=\"nx\">app</span> <span class=\"o\">=</span> <span class=\"nf\">express</span><span class=\"p\">();</span>\n</code></pre></div>\n</div>\n<h4 data-sourcepos=\"165:1-165:23\">\n<span id=\"12ポート指定\" class=\"fragment\"></span><a href=\"#12%E3%83%9D%E3%83%BC%E3%83%88%E6%8C%87%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>1.2ポート指定</h4>\n<h5 data-sourcepos=\"167:1-167:21\">\n<span id=\"ポートとは\" class=\"fragment\"></span><a href=\"#%E3%83%9D%E3%83%BC%E3%83%88%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>ポートとは</h5>\n<p data-sourcepos=\"168:1-169:72\">そもそもポートとはそのサーバーに接続するときの入り口番号であり。ここではその番号の入り口を開きますよと指定をしておく。<br>\n※ローカルサーバーでは<code>3000番</code>や<code>8080番</code>をよく使う。</p>\n<div class=\"code-frame\" data-lang=\"Javascript\" data-sourcepos=\"171:1-180:3\">\n<div class=\"code-lang\"><span class=\"bold\">index.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">//ポート番号を指定</span>\n<span class=\"kd\">const</span> <span class=\"nx\">port</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span><span class=\"p\">;</span>\n\n<span class=\"c1\">//指定したポートを開く</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">listen</span><span class=\"p\">(</span><span class=\"nx\">port</span><span class=\"p\">,</span> <span class=\"p\">()</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nf\">log</span><span class=\"p\">(</span><span class=\"s2\">`繋がったよhttp://localhost:</span><span class=\"p\">${</span><span class=\"nx\">port</span><span class=\"p\">}</span><span class=\"s2\">`</span><span class=\"p\">)</span>\n<span class=\"p\">});</span>\n\n</code></pre></div>\n</div>\n<h4 data-sourcepos=\"181:1-181:23\">\n<span id=\"13処理を書く\" class=\"fragment\"></span><a href=\"#13%E5%87%A6%E7%90%86%E3%82%92%E6%9B%B8%E3%81%8F\"><i class=\"fa fa-link\"></i></a>1.3処理を書く</h4>\n<p data-sourcepos=\"183:1-183:104\">APIの処理は<code>HTTPメゾット</code>と<code>エンドポイント</code>を使用してルーティングを行う。</p>\n<h5 data-sourcepos=\"184:1-184:34\">\n<span id=\"131-httpメゾットとは\" class=\"fragment\"></span><a href=\"#131-http%E3%83%A1%E3%82%BE%E3%83%83%E3%83%88%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>1.3.1 HTTPメゾットとは</h5>\n<p data-sourcepos=\"185:1-185:167\">HTTPメゾットはGET、POST、PUT、DELETE、CONNECT、OPTIONS、TRACE、PATCHの８個あるが今回は<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>の４個を説明する。</p>\n<table data-sourcepos=\"187:1-192:60\">\n<thead>\n<tr data-sourcepos=\"187:1-187:25\">\n<th style=\"text-align: left\" data-sourcepos=\"187:2-187:17\">HTTPメゾット</th>\n<th style=\"text-align: center\" data-sourcepos=\"187:19-187:24\">説明</th>\n</tr>\n</thead>\n<tbody>\n<tr data-sourcepos=\"189:1-189:148\">\n<td style=\"text-align: left\" data-sourcepos=\"189:2-189:16\">GET（参照）</td>\n<td style=\"text-align: center\" data-sourcepos=\"189:18-189:147\">HTMLファイルや画像といったデータを取得する際に使用される。webサイト閲覧時には一番使われる</td>\n</tr>\n<tr data-sourcepos=\"190:1-190:55\">\n<td style=\"text-align: left\" data-sourcepos=\"190:2-190:23\">POST（新規作成）</td>\n<td style=\"text-align: center\" data-sourcepos=\"190:25-190:54\">データの追加や作成。</td>\n</tr>\n<tr data-sourcepos=\"191:1-191:63\">\n<td style=\"text-align: left\" data-sourcepos=\"191:2-191:16\">PUT（更新）</td>\n<td style=\"text-align: center\" data-sourcepos=\"191:18-191:62\">データを更新する際に使われる。</td>\n</tr>\n<tr data-sourcepos=\"192:1-192:60\">\n<td style=\"text-align: left\" data-sourcepos=\"192:2-192:19\">DELETE（削除）</td>\n<td style=\"text-align: center\" data-sourcepos=\"192:21-192:59\">データの削除に使用される。</td>\n</tr>\n</tbody>\n</table>\n<h5 data-sourcepos=\"195:1-195:39\">\n<span id=\"132-エンドポイントとは\" class=\"fragment\"></span><a href=\"#132-%E3%82%A8%E3%83%B3%E3%83%89%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>1.3.2 エンドポイントとは</h5>\n<p data-sourcepos=\"197:1-198:87\">エンドポイント(URI)とは連携したいAPIにアクセスするための接続先<br>\n<code>http://localhost/list</code>このURLの場合<code>/list</code>これがエンドポイントになる</p>\n<h5 data-sourcepos=\"201:1-201:30\">\n<span id=\"133-ルーティング\" class=\"fragment\"></span><a href=\"#133-%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0\"><i class=\"fa fa-link\"></i></a>1.3.3 ルーティング</h5>\n<p data-sourcepos=\"203:1-205:122\">HTTPリクエストのURLに応じて、アプリケーション内で実行する処理を決定する仕組みです。<br>\nExpress.jsでは、<code>app.HTTPメソッド名()</code> 関数を使用してルートを定義します。<br>\n<code>app.get()</code>、<code>app.post()</code>、<code>app.put()</code>、<code>app.delete()</code> などのHTTPメソッドに対応した関数を使用する。</p>\n<p data-sourcepos=\"207:1-211:79\">書き方は、<code>app.HTTPメソッド名(エンドポイント,指定するコールバック関数)</code><br>\n第二引数のコールバック関数でしたい処理を書いていきます。また<code>req</code>と<code>res</code>を呼び出します。<br>\n※<code>req</code>：リクエストオブジェクト（簡単に言うと、クライアント側から送られてきたデータを保持するオブジェクト)<br>\n<code>res</code>:レスポンスオブジェクト（処理したものをクライアントに返す物を構成したオブジェクト)<br>\nresのプロパティやメソッド：<a href=\"https://expressjs.com/ja/4x/api.html#res\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://expressjs.com/ja/4x/api.html#res</a></p>\n<h5 data-sourcepos=\"213:1-213:24\">\n<span id=\"134-getの処理\" class=\"fragment\"></span><a href=\"#134-get%E3%81%AE%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>1.3.4 GETの処理</h5>\n<p data-sourcepos=\"215:1-215:64\">例では、getのHTTPメゾットを呼び出しています。</p>\n<div class=\"code-frame\" data-lang=\"Javascript\" data-sourcepos=\"216:1-224:3\">\n<div class=\"code-lang\"><span class=\"bold\">index.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">//getの処理をする</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/</span><span class=\"dl\">'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nx\">req</span><span class=\"p\">,</span> <span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n\n<span class=\"c1\">//Heello Woldとクライアントに送る</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">Hello World!</span><span class=\"dl\">'</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n\n</code></pre></div>\n</div>\n<p data-sourcepos=\"225:1-225:129\">今回は言葉を送り返しているが、<code>res.json</code>や<code>res.render</code>でjsonやHTMLファイルを返すこともできます。</p>\n<h5 data-sourcepos=\"226:1-226:25\">\n<span id=\"135-postの処理\" class=\"fragment\"></span><a href=\"#135-post%E3%81%AE%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>1.3.5 POSTの処理</h5>\n<p data-sourcepos=\"227:1-227:65\">例では、postのHTTPメゾットを呼び出しています。</p>\n<div class=\"code-frame\" data-lang=\"Javascript\" data-sourcepos=\"228:1-239:3\">\n<div class=\"code-lang\"><span class=\"bold\">index.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">//postの処理をする</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/list</span><span class=\"dl\">'</span><span class=\"p\">,(</span><span class=\"nx\">req</span><span class=\"p\">,</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"c1\">//送られてきたデータをlistに代入</span>\n    <span class=\"kd\">const</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">list</span><span class=\"p\">;</span>\n    \n<span class=\"c1\">//ここでDBにデータを保存などの処理をするが今回は省く</span>\n\n<span class=\"c1\">//listを返す</span>\n    <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span>\n<span class=\"p\">});</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"240:1-240:310\">getでもURLに値を記入して送る方法もあるがそれではパスワードなどの機密情報で使用できないため、データを送るときはpostを使用すると良い。また処理ができたことを確認できるように、何かしらはクライアントに返すのが良い。</p>\n<h5 data-sourcepos=\"241:1-241:24\">\n<span id=\"136-putの処理\" class=\"fragment\"></span><a href=\"#136-put%E3%81%AE%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>1.3.6 PUTの処理</h5>\n<div class=\"code-frame\" data-lang=\"Javascript\" data-sourcepos=\"242:1-253:3\">\n<div class=\"code-lang\"><span class=\"bold\">index.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">//putの処理をする</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"nf\">put</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/list/upd</span><span class=\"dl\">'</span><span class=\"p\">,(</span><span class=\"nx\">req</span><span class=\"p\">,</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"c1\">//送られてきたデータをlistに代入</span>\n        <span class=\"kd\">const</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">list</span><span class=\"p\">;</span>\n        \n<span class=\"c1\">//ここでDBのデータを更新などの処理をするが今回は省く</span>\n\n    <span class=\"c1\">//listを返す</span>\n        <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span>\n    <span class=\"p\">});</span>\n</code></pre></div>\n</div>\n<h5 data-sourcepos=\"255:1-255:27\">\n<span id=\"136-deleteの処理\" class=\"fragment\"></span><a href=\"#136-delete%E3%81%AE%E5%87%A6%E7%90%86\"><i class=\"fa fa-link\"></i></a>1.3.6 DELETEの処理</h5>\n<div class=\"code-frame\" data-lang=\"Javascript\" data-sourcepos=\"256:1-267:3\">\n<div class=\"code-lang\"><span class=\"bold\">index.js</span></div>\n<div class=\"highlight\"><pre><code><span class=\"c1\">//DELETEの処理を書く</span>\n<span class=\"nx\">app</span><span class=\"p\">.</span><span class=\"k\">delete</span><span class=\"p\">(</span><span class=\"dl\">'</span><span class=\"s1\">/list/del</span><span class=\"dl\">'</span><span class=\"p\">,(</span><span class=\"nx\">req</span><span class=\"p\">,</span><span class=\"nx\">res</span><span class=\"p\">)</span> <span class=\"o\">=&gt;</span> <span class=\"p\">{</span>\n<span class=\"c1\">//送られてきたデータをlistに代入  </span>\n            <span class=\"kd\">const</span> <span class=\"nx\">list</span> <span class=\"o\">=</span> <span class=\"nx\">req</span><span class=\"p\">.</span><span class=\"nx\">body</span><span class=\"p\">.</span><span class=\"nx\">list</span><span class=\"p\">;</span>\n        \n<span class=\"c1\">//ここでDBのデータを消去などの処理をするが今回は省く</span>\n\n<span class=\"c1\">//listを返す</span>\n            <span class=\"nx\">res</span><span class=\"p\">.</span><span class=\"nf\">send</span><span class=\"p\">(</span><span class=\"nx\">list</span><span class=\"p\">);</span>\n        <span class=\"p\">});</span>\n</code></pre></div>\n</div>\n<p data-sourcepos=\"269:1-269:62\">Exspressは基本的にこの様にAPIを構築していく。</p>\n<h3 data-sourcepos=\"271:1-271:19\">\n<span id=\"便利ツール\" class=\"fragment\"></span><a href=\"#%E4%BE%BF%E5%88%A9%E3%83%84%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>便利ツール</h3>\n<h4 data-sourcepos=\"273:1-273:14\">\n<span id=\"1-postman\" class=\"fragment\"></span><a href=\"#1-postman\"><i class=\"fa fa-link\"></i></a>1 postman</h4>\n<p data-sourcepos=\"275:1-276:231\">postやputなどのクライアントからデータが送られてくる処理を書くときに使用します。<br>\n送信側と繋ぐ前に処理がちゃんと動くかをチェックするときに手軽にデータだけを送ることができるので便利！しかもローカルサーバーで建てていても送ることができる。</p>\n<p data-sourcepos=\"278:1-278:24\"><iframe id=\"qiita-embed-content__673b8402295ee36234703108df66ecee\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__673b8402295ee36234703108df66ecee\" data-content=\"https%3A%2F%2Fwww.postman.com%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h4 data-sourcepos=\"280:1-280:17\">\n<span id=\"２render\" class=\"fragment\"></span><a href=\"#%EF%BC%92render\"><i class=\"fa fa-link\"></i></a>２　render</h4>\n<p data-sourcepos=\"282:1-283:287\">APIができた！と思ってもローカルサーバーで建てていては、外部（自分のPC以外）からのアクセスができません。そこで役に立つのがこの<code>render</code>です.<br>\nrenderはクラウドのサーバーを立ち上げることができます。githubのリポジトリーにあげておけば簡単にAPIサーバーを使えるのでおすすめです。またDBサーバーも立ち上げることもできるので、これ一つで完結します。</p>\n<p data-sourcepos=\"285:1-285:19\"><iframe id=\"qiita-embed-content__b739076f2918d666e0ce91e3e844bd42\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__b739076f2918d666e0ce91e3e844bd42\" data-content=\"https%3A%2F%2Frender.com%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n</iframe>\n</p>\n<h2 data-sourcepos=\"287:1-287:12\">\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h2>\n<p data-sourcepos=\"288:1-289:243\">WebAPIの概念、実装方法を簡潔にまとめてみました。多々認識の違いがあると思いますので修正コメントをお願いします。<br>\nまた今回は忙しい人向けにかなり端折って書いてあります。冒頭にもありました通り今後詳しく書いたものを随時更新をしていくつもりですのでそちらも是非読んでみてください。</p>\n<h2 data-sourcepos=\"292:1-292:18\">\n<span id=\"参考サイト\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E3%82%B5%E3%82%A4%E3%83%88\"><i class=\"fa fa-link\"></i></a>参考サイト</h2>\n<ul data-sourcepos=\"294:1-297:0\">\n<li data-sourcepos=\"294:1-294:52\"><a href=\"https://qiita.com/ryome/items/16659012ed8aa0aa1fac\" class=\"autolink\" id=\"reference-7fa77f923cdbcb5f4b08\">https://qiita.com/ryome/items/16659012ed8aa0aa1fac</a></li>\n<li data-sourcepos=\"295:1-295:52\"><a href=\"https://qiita.com/s79ns/items/8dd2f06145cbf9464b99\" class=\"autolink\" id=\"reference-ced1c1126b08306cf612\">https://qiita.com/s79ns/items/8dd2f06145cbf9464b99</a></li>\n<li data-sourcepos=\"296:1-297:0\"><a href=\"https://expressjs.com/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://expressjs.com/</a></li>\n</ul>\n",
//         "body": "## 前置\n\n私はプログラミングを始めて半年の初心者である。名前はまだない\nモバイルアプリの勉強をずっとしてきたが、ハッカソンでwebAPIを作ることに\nなったので作ってみた。多分間違っている部分があると思う。\n\n※これは時間がない人向けに簡単にまとめたものです。\n詳しく書いた物も随時投稿していきますので、お待ちください。\n\n## APIとは\n\nそもそもAPIとはなんでしょうか？\nAPI（Application Programming Interface）とは、プログラムの機能の一部を別のプログラム上で利用できるように共有する仕組み。簡単に言うとweb上で動かすプログラム関数みたいなことだと思う。\n\n#### webAPI\n\nその中でもhttpやhttpsなどWeb技術を用いて実現されるAPIの一種。\n今回はこれを実装していく。\nイメージしにくいので画像を置いておく。画像のようにサーバーとwebブラウザで通信を行い、画面の切り替えをしたり、データを保存,呼び出しをしたりする。\n![webAPI画像.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3476081/78cd8cf9-66c7-3d28-770a-8d5bc4d982d2.jpeg)\n\n## Node.jsとは\nJavaScriptを用いてサーバーサイドで動作するアプリケーションを開発するための実行環境です。\n※cjsやejsなど書き方の違いでモジュールの選択が変わって来る部分もありますが、そこに関しては今後詳しくまとめた物を投稿していきます。\n\n## Express.jsとは\nExpress.jsとはnode.jsのためのフレームワークです。\njsでwebAPIを実装する一番ポピュラーなやつらしい。\n\n## 事前準備\n\nはじめにnode.jsをインストールしてnpmを使用できるようにしておく。\n下のようにバージョンバージョンが帰ってこればOK！\n\n```\n$ node -v\nv21.1.0\n```\n```\n$ npm -v\n10.2.0\n```\n※インストール方法は今回は省くため参考サイトを貼っておきます。\n- https://qiita.com/ryome/items/eec08b28aff294e8c3d6\n\n## 環境構築\n\n#### 1.プロジェクトの作成\n\nまず作業ディレクトリを作成し、そのディレクトリに移動します。\n``` :ターミナル\n$ mkdire express-web-api\n\n$ cd express-web-api\n```\n\nそのディレクトリでnpmを初期化します。\n初期化と言っているが、package.jsonというプロジェクトの管理ファイルをディレクトリ下に作成することです。\nちなみに何か問題が起こった時にも初期化としても使用できる。\n``` :ターミナル\n$ npm init --yes\n\n{\n  \"name\": \"express-web-api\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\"\n}\n```\nこれでnode.jsのプロジェクトが作れた。\n\n#### 2.Expressのインストール\n\nexpress.jsをインストールする\n```\n$ npm install express\n\ndded 62 packages, and audited 63 packages in 4s\n\n11 packages are looking for funding\n  run `npm fund` for details\n\nfound 0 vulnerabilities\n```\n#### 3.ファイルの\n\nコードをメインで書いていく`index.js`ファイルを作成する\n![スクリーンショット 2023-12-21 20.45.32.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3476081/1bbd94f1-a1b5-eb58-c5b3-5cff7c2ad18a.png)\nこのファイルがメインファイルになる。\n\n#### 4.サーバーを建てよう！\n\n##### 4.1 APIを作成\nもちろん`index.js`に記入していくー\n説明は後でするので、とりあえず下のコードを作成する。\n```Javascript:index.js\nconst express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n    res.send('Hello World!');\n});\n\napp.listen(port, () => {\n    console.log(`繋がったよ:http://localhost:${port}`)\n});\n```\n##### 4.2サーバーを起動\nターミナルで`node index.js`とコマンドを打てば、ローカルサーバー(パソコン内のみのサーバー)が起動できる。\n``` :ターミナル\n$ node index.js\n繋がったよhttp://localhost:3000\n```\nこの`http://localhost:3000`をブラウザでひらけば`Hello World!`が出力される。\n※ `package.json`にstartコマンドを追加して起動コマンドを変更するのが一般的らしい。\n```Javascript:package.json\n{\n  \"name\": \"express-web-api\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"node index.js\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"dependencies\": {\n    \"express\": \"^4.18.2\"\n  }\n}\n```\n上の様に書き換えれば、`node index.js`でサーバーが起動できる。\n``` :ターミナル\n$ node index.js\n繋がったよhttp://localhost:3000\n```\n##### 4.3サーバーを停止\n\n`control + c`で停止できる\n(windows:`ctrl + c`)\n\nこれでAPIサーバーをローカールで起動,アクセス,停止までをできるようになった。\n\n## APIの作成の仕方\n先ほどの`index.js`の中身で説明していく。\n\n### 1.Expressの基本\n\n#### 1.1モジュールのロード\nexpressモジュールを読み込み、appに代入する。\n```Javascript:index.js\n//1.1\nconst express = require('express');\nconst app = express();\n```\n#### 1.2ポート指定\n\n##### ポートとは\nそもそもポートとはそのサーバーに接続するときの入り口番号であり。ここではその番号の入り口を開きますよと指定をしておく。\n※ローカルサーバーでは`3000番`や`8080番`をよく使う。\n\n```Javascript:index.js\n//ポート番号を指定\nconst port = 3000;\n\n//指定したポートを開く\napp.listen(port, () => {\n    console.log(`繋がったよhttp://localhost:${port}`)\n});\n\n```\n#### 1.3処理を書く\n\nAPIの処理は`HTTPメゾット`と`エンドポイント`を使用してルーティングを行う。\n##### 1.3.1 HTTPメゾットとは\nHTTPメゾットはGET、POST、PUT、DELETE、CONNECT、OPTIONS、TRACE、PATCHの８個あるが今回は`GET`、`POST`、`PUT`、`DELETE`の４個を説明する。\n\n|HTTPメゾット|説明|\n|:---|:---:|\n|GET（参照）|HTMLファイルや画像といったデータを取得する際に使用される。webサイト閲覧時には一番使われる|\n|POST（新規作成）|データの追加や作成。|\n|PUT（更新）|データを更新する際に使われる。|\n|DELETE（削除）|データの削除に使用される。|\n\n\n##### 1.3.2 エンドポイントとは\n\nエンドポイント(URI)とは連携したいAPIにアクセスするための接続先\n`http://localhost/list`このURLの場合`/list`これがエンドポイントになる\n\n\n##### 1.3.3 ルーティング\n\nHTTPリクエストのURLに応じて、アプリケーション内で実行する処理を決定する仕組みです。\nExpress.jsでは、`app.HTTPメソッド名()` 関数を使用してルートを定義します。\n`app.get()`、`app.post()`、`app.put()`、`app.delete()` などのHTTPメソッドに対応した関数を使用する。\n\n書き方は、`app.HTTPメソッド名(エンドポイント,指定するコールバック関数)`\n第二引数のコールバック関数でしたい処理を書いていきます。また`req`と`res`を呼び出します。\n※`req`：リクエストオブジェクト（簡単に言うと、クライアント側から送られてきたデータを保持するオブジェクト)\n`res`:レスポンスオブジェクト（処理したものをクライアントに返す物を構成したオブジェクト)\nresのプロパティやメソッド：https://expressjs.com/ja/4x/api.html#res\n\n##### 1.3.4 GETの処理\n\n例では、getのHTTPメゾットを呼び出しています。\n```Javascript:index.js\n//getの処理をする\napp.get('/', (req, res) => {\n\n//Heello Woldとクライアントに送る\n    res.send('Hello World!');\n});\n\n```\n今回は言葉を送り返しているが、`res.json`や`res.render`でjsonやHTMLファイルを返すこともできます。\n##### 1.3.5 POSTの処理\n例では、postのHTTPメゾットを呼び出しています。\n```Javascript:index.js\n//postの処理をする\napp.post('/list',(req,res) => {\n//送られてきたデータをlistに代入\n    const list = req.body.list;\n    \n//ここでDBにデータを保存などの処理をするが今回は省く\n\n//listを返す\n    res.send(list);\n});\n```\ngetでもURLに値を記入して送る方法もあるがそれではパスワードなどの機密情報で使用できないため、データを送るときはpostを使用すると良い。また処理ができたことを確認できるように、何かしらはクライアントに返すのが良い。\n##### 1.3.6 PUTの処理\n```Javascript:index.js\n//putの処理をする\napp.put('/list/upd',(req,res) => {\n//送られてきたデータをlistに代入\n        const list = req.body.list;\n        \n//ここでDBのデータを更新などの処理をするが今回は省く\n\n    //listを返す\n        res.send(list);\n    });\n```\n\n##### 1.3.6 DELETEの処理\n```Javascript:index.js\n//DELETEの処理を書く\napp.delete('/list/del',(req,res) => {\n//送られてきたデータをlistに代入  \n            const list = req.body.list;\n        \n//ここでDBのデータを消去などの処理をするが今回は省く\n\n//listを返す\n            res.send(list);\n        });\n```\n\nExspressは基本的にこの様にAPIを構築していく。\n\n### 便利ツール\n\n#### 1 postman\n\npostやputなどのクライアントからデータが送られてくる処理を書くときに使用します。\n送信側と繋ぐ前に処理がちゃんと動くかをチェックするときに手軽にデータだけを送ることができるので便利！しかもローカルサーバーで建てていても送ることができる。\n\nhttps://www.postman.com/\n\n#### ２　render\n\nAPIができた！と思ってもローカルサーバーで建てていては、外部（自分のPC以外）からのアクセスができません。そこで役に立つのがこの`render`です.\nrenderはクラウドのサーバーを立ち上げることができます。githubのリポジトリーにあげておけば簡単にAPIサーバーを使えるのでおすすめです。またDBサーバーも立ち上げることもできるので、これ一つで完結します。\n\nhttps://render.com/\n\n## 最後に\nWebAPIの概念、実装方法を簡潔にまとめてみました。多々認識の違いがあると思いますので修正コメントをお願いします。\nまた今回は忙しい人向けにかなり端折って書いてあります。冒頭にもありました通り今後詳しく書いたものを随時更新をしていくつもりですのでそちらも是非読んでみてください。\n\n\n## 参考サイト\n\n- https://qiita.com/ryome/items/16659012ed8aa0aa1fac\n- https://qiita.com/s79ns/items/8dd2f06145cbf9464b99\n- https://expressjs.com/\n\n",
//         "coediting": false,
//         "comments_count": 0,
//         "created_at": "2023-12-21T23:50:12+09:00",
//         "group":  "group": {
    //   "created_at": "2000-01-01T00:00:00+00:00",
    //   "description": "This group is for developers.",
    //   "name": "Dev",
    //   "private": false,
    //   "updated_at": "2000-01-01T00:00:00+00:00",
    //   "url_name": "dev"
    // },
//         "id": "bc4b561a396ae7e0aa1f",
//         "likes_count": 3,
//         "private": false,
//         "reactions_count": 0,
//         "stocks_count": 2,
//         "tags": [
//             {
//                 "name": "JavaScript",
//                 "versions": []
//             },
//             {
//                 "name": "Node.js",
//                 "versions": []
//             },
//             {
//                 "name": "WebAPI",
//                 "versions": []
//             },
//             {
//                 "name": "Express",
//                 "versions": []
//             },
//             {
//                 "name": "初心者です",
//                 "versions": []
//             }
//         ],
//         "title": "初心者がnode.js expressでwebAPIを実装してみた。(簡易版)",
//         "updated_at": "2023-12-21T23:50:12+09:00",
//         "url": "https://qiita.com/westt/items/bc4b561a396ae7e0aa1f",
//         "user": {
//             "description": null,
//             "facebook_id": null,
//             "followees_count": 1,
//             "followers_count": 0,
//             "github_login_name": "nishi240masa",
//             "id": "westt",
//             "items_count": 1,
//             "linkedin_id": null,
//             "location": null,
//             "name": "",
//             "organization": null,
//             "permanent_id": 3476081,
//             "profile_image_url": "https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/3476081/profile-images/1703171653",
//             "team_only": false,
//             "twitter_screen_name": "westM27",
//             "website_url": null
//         },
//         "page_views_count": 2425,
//         "team_membership": null,
//         "organization_url_name": null,
//         "slide": false
//     }
// ]